//
//  LocationWorkerTests.swift
//  GeoMemories
//
//  Created by Арсен Саруханян on 18.08.2025.
//  Copyright (c) 2025 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

@testable import GeoMemories
import CoreLocation
import XCTest

class MockLocationManager: LocationManagerProtocol {
    var authorizationStatus: CLAuthorizationStatus = .notDetermined
    var delegate: (any CLLocationManagerDelegate)?
    var didRequestAuthorization = false
    
    func requestWhenInUseAuthorization() {
        didRequestAuthorization = true
    }
}

class LocationWorkerTests: XCTestCase {
    let mockManager = MockLocationManager()
    
    // MARK: Subject under test
    var sut: LocationWorker!
    
    // MARK: Test lifecycle
    
    override func setUp() {
        super.setUp()
        setupLocationWorker()
    }
    
    override func tearDown() {
        super.tearDown()
    }
    
    // MARK: Test setup
    
    func setupLocationWorker() {
        sut = LocationWorker()
    }
    
    // MARK: Tests
    
    func testWorkerRequestsAuthorizationWhenNotDetermined() {
        // Given
        sut = LocationWorker(locationManager: mockManager)
        mockManager.authorizationStatus = .notDetermined
        
        // When
        sut.checkOrRequestLocationPermission { _ in }
        
        // Then
        XCTAssertTrue(mockManager.didRequestAuthorization == true)
    }
    
    func testWorkerRequestsAuthorizationWhenDenied() {
        // Given
        sut = LocationWorker(locationManager: mockManager)
        mockManager.authorizationStatus = .denied
        mockManager.didRequestAuthorization = false
        var isPermitted: Bool!
        
        // When
        sut.checkOrRequestLocationPermission { isPermitted = $0 }
        
        // Then
        XCTAssertEqual(isPermitted, false)
    }
    
    func testWorkerRequestsAuthorizationWhenAuthorized() {
        // Given
        sut = LocationWorker(locationManager: mockManager)
        mockManager.authorizationStatus = .authorizedWhenInUse
        mockManager.didRequestAuthorization = false
        var isPermitted: Bool!
        
        // When
        sut.checkOrRequestLocationPermission { isPermitted = $0 }
        
        // Then
        XCTAssertTrue(isPermitted)
    }
}
