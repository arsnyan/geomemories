//
//  LocationWorkerTests.swift
//  GeoMemories
//
//  Created by Арсен Саруханян on 18.08.2025.
//  Copyright (c) 2025 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

@testable import GeoMemories
import CoreLocation
import XCTest
import Combine

class MockLocationManager: LocationManagerProtocol {
    var authorizationStatus: CLAuthorizationStatus = .notDetermined
    var delegate: (any CLLocationManagerDelegate)?
    var didRequestAuthorization = false
    var locations: [CLLocation] = []
    
    func requestWhenInUseAuthorization() {
        didRequestAuthorization = true
        
        Task {
            await MainActor.run {
                self.authorizationStatus = .authorizedWhenInUse
                self.delegate?.locationManagerDidChangeAuthorization?(CLLocationManager())
            }
        }
    }
    
    func requestLocation() {
        Task {
            await MainActor.run {
                let newLocation = CLLocation(latitude: 25, longitude: 52)
                locations.last != newLocation ? locations.append(newLocation) : ()
                delegate?.locationManager?(CLLocationManager(), didUpdateLocations: locations)
            }
        }
    }
}

class LocationWorkerTests: XCTestCase {
    let mockManager = MockLocationManager()
    var cancellables: Set<AnyCancellable> = []
    
    // MARK: Subject under test
    var sut: LocationWorker!
    
    // MARK: Test lifecycle
    
    override func setUp() {
        super.setUp()
        setupLocationWorker()
    }
    
    override func tearDown() {
        super.tearDown()
    }
    
    // MARK: Test setup
    
    func setupLocationWorker() {
        sut = LocationWorker(locationManager: mockManager)
    }
    
    // MARK: Tests
    
    func testWorkerRequestsAuthorizationWhenNotDetermined() {
        // Given
        sut = LocationWorker(locationManager: mockManager)
        mockManager.authorizationStatus = .notDetermined
        
        // When
        let _ = sut.getCurrentLocation()
        
        // Then
        XCTAssertTrue(mockManager.didRequestAuthorization)
    }
    
    func testWorkerDoesntRequestsAuthorizationWhenDenied_AndDoesntPermit() {
        // Given
        sut = LocationWorker(locationManager: mockManager)
        mockManager.authorizationStatus = .denied
        mockManager.didRequestAuthorization = false
        let expectation = expectation(
            description: "The request for authorization should not happen and the permission should not be changed"
        )
        
        // When
        sut.getCurrentLocation()
            .sink(
                receiveCompletion: { [weak self] completion in
                    guard let self else {
                        XCTFail("Self was not available")
                        return
                    }
                    
                    // Then
                    switch completion {
                    case .finished:
                        XCTFail("The request for authorization should not have finished, because the permission was denied in the first place")
                    case .failure(let error):
                        switch error {
                        case .permissionDenied:
                            XCTAssertEqual(mockManager.didRequestAuthorization, false)
                            expectation.fulfill()
                        default:
                            XCTFail(
                                "Something went wrong but the permission wasn't denied"
                            )
                        }
                    }
                },
                receiveValue: { _ in }
            )
            .store(in: &cancellables)
        
        wait(for: [expectation])
    }
    
    func testWorkerDoesntRequestAuthorizationWhenAuthorized() {
        // Given
        sut = LocationWorker(locationManager: mockManager)
        mockManager.authorizationStatus = .authorizedWhenInUse
        let expectation = expectation(
            description: "The request for authorization should not happen"
        )
        
        // When
        sut.getCurrentLocation()
            .sink(
                receiveCompletion: { [weak self] completion in
                    guard let self else {
                        XCTFail("Self was not available")
                        return
                    }
                    
                    // Then
                    switch completion {
                    case .finished:
                        XCTAssertEqual(mockManager.didRequestAuthorization, false)
                        expectation.fulfill()
                    case .failure(let error):
                        XCTFail(
                            "Something went wrong: \(error)"
                        )
                    }
                },
                receiveValue: { _ in }
            )
            .store(in: &cancellables)
        
        wait(for: [expectation])
    }
}
