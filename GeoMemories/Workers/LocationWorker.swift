//
//  LocationWorker.swift
//  GeoMemories
//
//  Created by Арсен Саруханян on 18.08.2025.
//  Copyright (c) 2025 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import CoreLocation

protocol LocationManagerProtocol: AnyObject {
    var authorizationStatus: CLAuthorizationStatus { get }
    var delegate: CLLocationManagerDelegate? { get set }
    func requestWhenInUseAuthorization()
}

extension CLLocationManager: LocationManagerProtocol {}

class LocationWorker: NSObject, CLLocationManagerDelegate {
    private let locationManager: LocationManagerProtocol
    private var completion: ((Bool) -> Void)?
    
    init(locationManager: LocationManagerProtocol = CLLocationManager()) {
        self.locationManager = locationManager
        super.init()
    }
    
    func checkOrRequestLocationPermission(completion: @escaping (Bool) -> Void) {
        self.completion = completion
        locationManager.delegate = self as CLLocationManagerDelegate
        
        switch locationManager.authorizationStatus {
        case .notDetermined:
            locationManager.requestWhenInUseAuthorization()
        case .restricted, .denied:
            completion(false)
        case .authorizedAlways, .authorizedWhenInUse:
            completion(true)
        @unknown default:
            completion(false)
        }
    }
    
    func locationManagerDidChangeAuthorization(_ manager: CLLocationManager) {
        switch manager.authorizationStatus {
        case .restricted, .denied:
            completion?(false)
        case .authorizedAlways, .authorizedWhenInUse:
            completion?(true)
        default:
            break
        }
    }
}
