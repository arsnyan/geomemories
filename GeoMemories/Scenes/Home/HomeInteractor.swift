//
//  HomeInteractor.swift
//  GeoMemories
//
//  Created by Арсен Саруханян on 18.08.2025.
//  Copyright (c) 2025 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import Foundation
import Combine
import CoreStore

protocol HomeBusinessLogic {
    func provideCurrentLocation()
    func provideMapEntries()
    func addMapEntry(request: Home.AddEntry.Request)
    func provideEntryCallout(request: Home.ShowAnnotationPopover.Request)
}

protocol HomeDataStore {
    var entries: [GeoEntry] { get }
}

class HomeInteractor: HomeBusinessLogic, HomeDataStore {
    private var cancellables = Set<AnyCancellable>()
    var entries: [GeoEntry] = []
    var presenter: HomePresentationLogic?
    
    let locationWorker: LocationWorker
    let storageService: StorageServiceProtocol
    
    init(
        locationWorker: LocationWorker = LocationWorker(),
        storageService: StorageServiceProtocol = StorageService()
    ) {
        self.locationWorker = locationWorker
        self.storageService = storageService
    }
    
    func provideCurrentLocation() {
        presenter?.presentCurrentLocation(response: .loading)
        
        locationWorker.getCurrentLocation()
            .receive(on: DispatchQueue.main)
            .sink(
                receiveCompletion: { [weak self] completion in
                    if case .failure(let error) = completion {
                        let response = Home.SelectCurrentLocation.Response.failure(
                            error: error
                        )
                        self?.presenter?.presentCurrentLocation(response: response)
                    }
                },
                receiveValue: { [weak self] location in
                    let response = Home.SelectCurrentLocation.Response.success(
                        location: location
                    )
                    self?.presenter?.presentCurrentLocation(response: response)
                }
            )
            .store(in: &cancellables)
    }
    
    func provideMapEntries() {
        presenter?.presentMapEntries(response: .loading)
        
        StorageService().getGeoEntries()
            .receive(on: DispatchQueue.main)
            .sink(
                receiveCompletion: { [weak self] completion in
                    if case .failure(let error) = completion {
                        let response = Home.ShowMapEntries.Response.failure(error: error)
                        self?.presenter?.presentMapEntries(response: response)
                    }
                },
                receiveValue: { [weak self] entries in
                    let response = Home.ShowMapEntries.Response.success(entries: entries)
                    self?.presenter?.presentMapEntries(response: response)
                }
            )
            .store(in: &cancellables)
    }
    
    func addMapEntry(request: Home.AddEntry.Request) {
        
    }
    
    func provideEntryCallout(request: Home.ShowAnnotationPopover.Request) {
        
    }
}
