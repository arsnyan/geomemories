//
//  HomePresenter.swift
//  GeoMemories
//
//  Created by Арсен Саруханян on 18.08.2025.
//  Copyright (c) 2025 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import CoreLocation
import MapKit
import CoreStore
import Combine

protocol HomePresentationLogic {
    func presentCurrentLocation(response: Home.SelectCurrentLocation.Response)
    func presentMapEntries(response: Home.ShowMapEntries.Response)
}

class HomePresenter: HomePresentationLogic {
    private var cancellables: Set<AnyCancellable> = []
    
    weak var viewController: HomeDisplayLogic?
    
    func presentCurrentLocation(response: Home.SelectCurrentLocation.Response) {
        switch response {
        case .loading:
            viewController?.displayCurrentLocation(viewModel: .loading)
        case .success(let location):
            viewController?.displayCurrentLocation(
                viewModel: .success(
                    region: MKCoordinateRegion(
                        center: location.coordinate,
                        latitudinalMeters: 500,
                        longitudinalMeters: 500
                    )
                )
            )
        case .failure(let error):
            let title: String
            let message: String
            
            if case .permissionDenied = error {
                title = String(localized: "locationServicesNotAuthorizedTitle")
                message = String(localized: "locationServicesNotAuthorizedMessage")
            } else {
                title = String(localized: "genericErrorTitle")
                message = String(localized: "noLocalizedErrorMessage") + "\n\(error.localizedDescription)"
            }
            
            viewController?.displayCurrentLocation(
                viewModel: .failure(
                    alertTitle: title,
                    alertMessage: message
                )
            )
        }
    }
    
    // swiftlint:disable large_tuple
    func presentMapEntries(response: Home.ShowMapEntries.Response) {
        switch response {
        case .loading:
            viewController?.displayMapEntries(viewModel: .loading)
        case .success(let entries):
            struct EntryDto {
                let entryRef: GeoEntry
                let title: String
                let description: String
                let lat: Double
                let lng: Double
                let media: [MediaEntry]
            }
            
            Dependencies.dataStack.reactive.perform { transaction -> [EntryDto] in
                let existing = entries.compactMap { transaction.fetchExisting($0) }
                return existing.map { entry -> EntryDto in
                    return EntryDto(
                        entryRef: entry,
                        title: entry.title,
                        description: entry.description,
                        lat: entry.latitude,
                        lng: entry.longitude,
                        media: Array(entry.mediaIds)
                    )
                }
            }
            .catch { _ in Just([]).eraseToAnyPublisher() }
            .flatMap { entriesData -> AnyPublisher<[MemoryAnnotation], Never> in
                guard !entriesData.isEmpty else {
                    return Just([]).eraseToAnyPublisher()
                }
                
                let publishers = entriesData.map { entry in
                    if let media = entry.media.first {
                        return Dependencies.mediaFileWorker.loadMediaPlaceholder(from: media)
                            .map { image in
                                return MemoryAnnotation(
                                    geoEntry: entry.entryRef,
                                    title: entry.title,
                                    description: entry.description,
                                    latitude: entry.lat,
                                    longitude: entry.lng,
                                    media: entry.media,
                                    icon: image
                                )
                            }
                            .replaceError(
                                with: MemoryAnnotation(
                                    geoEntry: entry.entryRef,
                                    title: entry.title,
                                    description: entry.description,
                                    latitude: entry.lat,
                                    longitude: entry.lng,
                                    media: [],
                                    icon: nil
                                )
                            )
                            .eraseToAnyPublisher()
                    } else {
                        return Just(
                            MemoryAnnotation(
                                geoEntry: entry.entryRef,
                                title: entry.title,
                                description: entry.description,
                                latitude: entry.lat,
                                longitude: entry.lng,
                                media: [],
                                icon: nil
                            )
                        )
                        .eraseToAnyPublisher()
                    }
                }
                
                return Publishers.MergeMany(publishers)
                    .collect()
                    .eraseToAnyPublisher()
            }
            .receive(on: DispatchQueue.main)
            .sink { [weak self] annotations in
                self?.viewController?.displayMapEntries(viewModel: .sucess(annotations: annotations))
            }
            .store(in: &cancellables)
        case .failure(let error):
            let title: String
            let message: String
            
            switch error {
            case .noDataStack:
                title = String(localized: "dataStackNotAvailableTitle")
                message = String(localized: "dataStackNotAvailableMessage")
            case .coreStoreError(let error):
                title = String(localized: "coreStoreErrorTitle")
                message = String(localized: "coreStoreErrorMessage")
                    + "\n\(error.localizedDescription)"
            default:
                title = String(localized: "genericErrorTitle")
                message = String(localized: "noLocalizedErrorMessage")
                    + "\n\(error.localizedDescription)"
            }
            
            viewController?.displayMapEntries(
                viewModel: .failure(
                    alertTitle: title,
                    alertMessage: message
                )
            )
        }
    }
}
