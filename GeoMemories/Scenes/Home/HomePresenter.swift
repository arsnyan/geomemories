//
//  HomePresenter.swift
//  GeoMemories
//
//  Created by Арсен Саруханян on 18.08.2025.
//  Copyright (c) 2025 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import CoreLocation
import MapKit

protocol HomePresentationLogic {
    func presentCurrentLocation(response: Home.SelectCurrentLocation.Response)
    func presentMapEntries(response: Home.ShowMapEntries.Response)
}

class HomePresenter: HomePresentationLogic {
    weak var viewController: HomeDisplayLogic?
    
    func presentCurrentLocation(response: Home.SelectCurrentLocation.Response) {
        switch response {
        case .loading:
            viewController?.displayCurrentLocation(viewModel: .loading)
        case .success(let location):
            viewController?.displayCurrentLocation(
                viewModel: .success(
                    region: MKCoordinateRegion(
                        center: location.coordinate,
                        latitudinalMeters: 500,
                        longitudinalMeters: 500
                    )
                )
            )
        case .failure(let error):
            let title: String
            let message: String
            
            if case .permissionDenied = error {
                title = String(localized: "locationServicesNotAuthorizedTitle")
                message = String(localized: "locationServicesNotAuthorizedMessage")
            } else {
                title = String(localized: "genericErrorTitle")
                message = String(localized: "noLocalizedErrorMessage") + "\n\(error.localizedDescription)"
            }
            
            viewController?.displayCurrentLocation(
                viewModel: .failure(
                    alertTitle: title,
                    alertMessage: message
                )
            )
        }
    }
    
    func presentMapEntries(response: Home.ShowMapEntries.Response) {
        switch response {
        case .loading:
            viewController?.displayMapEntries(viewModel: .loading)
        case .success(let entries):
            // FIXME: - It is 100% incorrect, need to think about retrieving image from local storage
            let annotations = entries.map { entry in
                MemoryAnnotation(
                    latitude: entry.latitude,
                    longitude: entry.longitude,
                    image: UIImage(
                        named: entry.mediaIds
                            .first(
                                where: {
                                    $0.mediaType == MediaType.image.rawValue
                                }
                            )?.mediaPath ?? ""
                    )
                )
            }
            viewController?.displayMapEntries(viewModel: .sucess(annotations: annotations))
        case .failure(let error):
            let title: String
            let message: String
            
            switch error {
            case .noDataStack:
                title = String(localized: "dataStackNotAvailableTitle")
                message = String(localized: "dataStackNotAvailableMessage")
            case .coreStoreError(let error):
                title = String(localized: "coreStoreErrorTitle")
                message = String(localized: "coreStoreErrorMessage")
                    + "\n\(error.localizedDescription)"
            default:
                title = String(localized: "genericErrorTitle")
                message = String(localized: "noLocalizedErrorMessage")
                    + "\n\(error.localizedDescription)"
            }
            
            viewController?.displayMapEntries(
                viewModel: .failure(
                    alertTitle: title,
                    alertMessage: message
                )
            )
        }
    }
}
